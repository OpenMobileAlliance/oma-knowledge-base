{"version":3,"file":"sh-carousel-CIGKtW0a.js","sources":["../../../../ui.config/sh-carousel.ts","../../../../components/content/sh-carousel.vue"],"sourcesContent":["export default {\n    wrapper: \"relative flex items-center w-full mt-10 overflow-hidden bg-gray-50 rounded-2xl border-2 border-oma-gray-50 shadow-2xl\",\n    title: \"text-3xl font-bold text-center dark:text-gray-100 text-[#1F2329]\",\n    subtitle: \"text-2xl text-center dark:text-gray-300 -mt-5\",\n    inner: \"flex transition-transform duration-500 ease-in-out\",\n    image: \"w-full h-auto max-h-500 object-cover\",\n    indicators: \"mt-6 w-full text-center\",\n    icon: \"hover:scale-125 duration-300 dark:text-gray-300 dark:hover:text-gray-100\",\n    // Default Tailwind CSS values\n    default: {\n    }\n  }","<template>\n  <div :class=\"ui.wrapper\">\n    <div class=\"p-16\">\n      <div class=\"overflow-hidden relative\">\n        <div :class=\"ui.title\">\n          <MDC v-if=\"title\" :value=\"title\" />\n        </div>\n        <div :class=\"ui.subtitle\">\n          <MDC v-if=\"subtitle\" :value=\"subtitle\" />\n        </div>\n        <div :class=\"ui.inner\" :style=\"{ transform: `translateX(-${activeIndex * 100}%)`, transition: transitionStyle }\" @transitionend=\"handleTransitionEnd\">\n          \n          <!-- Clone the last slide and put it in the front for infinite loop -->\n          <div v-if=\"allItems.length\" class=\"min-w-full\">\n            <component v-if=\"lastSlide.component\" :is=\"lastSlide.component\" v-bind=\"lastSlide.props\">\n              <template v-if=\"lastSlide.slotContent\">\n                <slot name=\"default\">{{ lastSlide.slotContent }}</slot>\n              </template>\n            </component>\n            <img v-else-if=\"lastSlide.urlImage\" :src=\"lastSlide.urlImage\" :alt=\"lastSlide.altImage\" :class=\"ui.image\" />\n          </div>\n\n          <div v-for=\"(item, index) in allItems\" :key=\"index\" class=\"min-w-full\">\n            <component v-if=\"item.component\" :is=\"item.component\" v-bind=\"item.props\">\n              <template v-if=\"item.slotContent\">\n                <slot name=\"default\">{{ item.slotContent }}</slot>\n              </template>\n            </component>\n            <img v-else-if=\"item.urlImage\" :src=\"item.urlImage\" :alt=\"item.altImage\" :class=\"ui.image\" />\n          </div>\n\n          <!-- Clone the first slide and put it at the end for infinite loop -->\n          <div v-if=\"allItems.length\" class=\"min-w-full\">\n            <component v-if=\"firstSlide.component\" :is=\"firstSlide.component\" v-bind=\"firstSlide.props\">\n              <template v-if=\"firstSlide.slotContent\">\n                <slot name=\"default\">{{ firstSlide.slotContent }}</slot>\n              </template>\n            </component>\n            <img v-else-if=\"firstSlide.urlImage\" :src=\"firstSlide.urlImage\" :alt=\"firstSlide.altImage\" :class=\"ui.image\" />\n          </div>\n        </div>\n        <div :class=\"ui.indicators\">\n          <span v-for=\"(item, index) in allItems\" :key=\"index\" class=\"indicator\" :class=\"{ active: index === realActiveIndex }\" @click=\"goToSlide(index)\"></span>\n        </div>\n      </div>\n    </div>\n    <button class=\"col-start-1 cols-span-1 absolute top-1/2 left-2 transform -translate-y-1/2 text-4xl cursor-pointer\" @click=\"prevSlide\">\n      <UIcon name=\"i-mdi:chevron-left-circle\" dynamic :class=\"ui.icon\" />\n    </button>\n    <button class=\"col-start-3 cols-span-1 absolute top-1/2 right-2 transform -translate-y-1/2 text-4xl cursor-pointer\" @click=\"nextSlide\">\n      <UIcon name=\"i-mdi:chevron-right-circle\" dynamic :class=\"ui.icon\" />\n    </button>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { carousel as config } from '@/ui.config';\n\ninterface CarouselItem {\n  component?: any;\n  props?: Record<string, any>;\n  slotContent?: string;\n  urlImage?: string;\n  altImage?: string;\n}\n\nconst props = defineProps<{\n  items?: CarouselItem[];\n  ui?: Partial<typeof config>;\n  title: string;\n  subtitle: string;\n}>();\n\nconst { ui } = useUI(\n  \"sh-carousel\",\n  toRef(props, \"ui\"),\n  config,\n);\n\nconst activeIndex = ref(1); // Start with the 1st real slide (index 1)\nconst transitionStyle = ref('transform 0.5s ease-in-out');\nlet interval: number | null = null;\n\nconst allItems = computed(() => {\n  const itemsList = [];\n  if (props.items) {\n    itemsList.push(...props.items);\n  }\n  return itemsList.length ? itemsList : [];\n});\n\nconst firstSlide = computed(() => allItems.value[0]);\nconst lastSlide = computed(() => allItems.value[allItems.value.length - 1]);\nconst realActiveIndex = computed(() => (activeIndex.value - 1 + allItems.value.length) % allItems.value.length);\n\nconst nextSlide = () => {\n  if (activeIndex.value < allItems.value.length + 1) {\n    activeIndex.value += 1;\n  }\n  transitionStyle.value = 'transform 0.5s ease-in-out'; // Enable animation\n};\n\nconst prevSlide = () => {\n  if (activeIndex.value > 0) {\n    activeIndex.value -= 1;\n  }\n  transitionStyle.value = 'transform 0.5s ease-in-out'; // Enable animation\n};\n\nconst goToSlide = (index: number) => {\n  activeIndex.value = index + 1;\n  transitionStyle.value = 'transform 0.5s ease-in-out'; // Enable animation\n};\n\nconst handleTransitionEnd = () => {\n  // After jumping to clones, reset to the corresponding real slide\n  if (activeIndex.value === allItems.value.length + 1) {\n    activeIndex.value = 1; // Wrap from last clone to first real slide\n    transitionStyle.value = 'none'; // Disable animation to avoid flicker\n  } else if (activeIndex.value === 0) {\n    activeIndex.value = allItems.value.length; // Wrap from first clone to last real slide\n    transitionStyle.value = 'none'; // Disable animation to avoid flicker\n  }\n};\n\nconst startAutoSlide = () => {\n  interval = window.setInterval(nextSlide, 3000);\n};\n\nconst stopAutoSlide = () => {\n  if (interval) {\n    clearInterval(interval);\n  }\n};\n\nonMounted(() => {\n  startAutoSlide();\n});\n\nonUnmounted(() => {\n  stopAutoSlide();\n});\n</script>\n\n<style scoped>\n.indicator {\n  display: inline-block;\n  height: 10px;\n  width: 10px;\n  margin: 0 5px;\n  background-color: #ccc;\n  border-radius: 50%;\n  cursor: pointer;\n}\n\n.indicator.active {\n  background-color: #333;\n}\n\n.dark .indicator.active {\n  background-color: #BC3C38;\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAe,SAAA;AAAA,EACX,SAAS;AAAA,EACT,OAAO;AAAA,EACP,UAAU;AAAA,EACV,OAAO;AAAA,EACP,OAAO;AAAA,EACP,YAAY;AAAA,EACZ,MAAM;AAAA;AAAA,EAEN,SAAS,CACT;AACF;;;;;;;;;;;ACuDF,UAAM,QAAQ;AAOR,UAAA,EAAE,OAAO;AAAA,MACb;AAAA,MACA,MAAM,OAAO,IAAI;AAAA,MACjB;AAAA,IAAA;AAGI,UAAA,cAAc,IAAI,CAAC;AACnB,UAAA,kBAAkB,IAAI,4BAA4B;AAGlD,UAAA,WAAW,SAAS,MAAM;AAC9B,YAAM,YAAY,CAAA;AAClB,UAAI,MAAM,OAAO;AACL,kBAAA,KAAK,GAAG,MAAM,KAAK;AAAA,MAC/B;AACO,aAAA,UAAU,SAAS,YAAY;IAAC,CACxC;AAED,UAAM,aAAa,SAAS,MAAM,SAAS,MAAM,CAAC,CAAC;AAC7C,UAAA,YAAY,SAAS,MAAM,SAAS,MAAM,SAAS,MAAM,SAAS,CAAC,CAAC;AACpE,UAAA,kBAAkB,SAAS,OAAO,YAAY,QAAQ,IAAI,SAAS,MAAM,UAAU,SAAS,MAAM,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}