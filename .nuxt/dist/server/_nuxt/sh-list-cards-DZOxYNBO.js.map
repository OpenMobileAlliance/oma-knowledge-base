{"version":3,"file":"sh-list-cards-DZOxYNBO.js","sources":["../../../../ui.config/sh-list-cards.ts","../../../../components/content/sh-list-cards.vue"],"sourcesContent":["export default {\n  wrapper: \"pl-4 pr-4 pb-10 shadow-xl bg-neutral-100 dark:bg-neutral-900/[0.6] rounded-2xl\",\n  inner: \"\",\n  tags: {\n    title: \"flex flex-wrap justify-center\",\n    clear: \"mt-3 text-lg px-3 border border-oma-red-500 bg-oma-red-600 hover:bg-oma-red-500 hover:border-oma-red-600 text-white dark:border-oma-red-500 dark:bg-oma-red-600 dark:hover:bg-oma-red-500 dark:hover:border-oma-red-600 dark:text-white rounded-3xl\",\n    list: \"inline-block overflow-hidden hover:scale-105 duration-200 ease-in-out rounded-3xl text-lg cursor-pointer px-3 mx-2 mt-4 hover:shadow-xl hover:shadow-primary/[0.3] border border-primary dark:text-white dark:border-primary dark:shadow-primary/[0.3]\",\n  },\n  header: \"\",\n  title: \"pt-6 text-3xl font-extrabold text-center dark:text-gray-200\",\n  subtitle: \"pb-6 text-xl font-semibold text-gray-600 dark:text-gray-400 -mt-8 text-center\",\n  text: \"pb-16 text-center font-light dark:text-gray-400\",\n  base: \"justify-between flex flex-wrap\",\n  gap: \"gap-0\",\n  // Default Tailwind CSS values\n  default: {\n  }\n}","<template>\n  <div :class=\"ui.wrapper\">\n    <div :class=\"ui.inner\">\n\n      <h3 :class=\"ui.tags.title\">Tags</h3>\n\n      <div class=\"flex justify-center\">\n        <span v-for=\"tag in tags\" :key=\"tag\" @click=\"toggleTag(tag)\"\n          :class=\"[ui.tags.list, { 'bg-primary-300 border-primary-400 text-neutral-600 dark:bg-primary-700 dark:border-primary-600 dark:hover:shadow-primary/[0.1]': selectedTags.includes(tag) }]\">\n          {{ tag }}\n          <UIcon v-if=\"selectedTags.includes(tag)\" name=\"i-line-md:close-circle\" dynamic\n            class=\"hover:text-gray-500 duration-100\" />\n        </span>\n      </div>\n\n      <div class=\"flex justify-center mt-5\">\n        <button v-if=\"selectedTags.length\" @click=\"clearTags\" :class=\"ui.tags.clear\">\n          Clear All\n          <UIcon name=\"i-line-md:filter-remove-twotone\" dynamic class=\"animate-pulse\"></UIcon>\n        </button>\n      </div>\n\n    </div>\n\n    <!-- Header Section -->\n    <div :class=\"ui.header\">\n      <div :class=\"ui.title\">\n        <MDC :value=\"title\" />\n      </div>\n      <div :class=\"ui.subtitle\">\n        <MDC :value=\"subtitle\" />\n      </div>\n      <div :class=\"ui.text\">\n        <MDC :value=\"text\" />\n\n      </div>\n    </div>\n\n    <!-- Cards Section -->\n    <div :class=\"[ui.base, ui.gap, gridClass]\">\n      <template v-for=\"(card, index) in filteredCards\" :key=\"index\">\n        <ShCard :title=\"card.title\" :subtitle=\"card.subtitle\" :excerpt=\"card\" :urlImage=\"card.urlImage\"\n          :urlUpperBase=\"card._path\" :article=\"card._path\" :leftLabel=\"card.leftLabel\" :rightLabel=\"card.rightLabel\"\n          :centerLabel=\"card.centerLabel\" />\n      </template>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { listCards as config, gridSizes } from \"@/ui.config\";\n\nconst props = withDefaults(\n  defineProps<{\n    ui?: Partial<typeof config>;\n    title?: string;\n    subtitle?: string;\n    text?: string;\n    cols?: number;\n    class?: any;\n    description?: string;\n    cardID?: number[];\n    allTags?: string[];\n  }>(),\n  {\n    ui: () => ({}),\n    title: \"\",\n    subtitle: \"\",\n    text: \"\",\n    cols: config.default.cols,\n    class: undefined,\n    description: \"\",\n  }\n);\n\nconst { ui, attrs } = useUI(\n  \"sh-list-cards\",\n  toRef(props, \"ui\"),\n  config,\n  toRef(props, \"class\")\n);\n\nconst windowWidth = ref(0);\n\nconst handleResize = () => {\n  windowWidth.value = window.innerWidth;\n};\n\n// Ensure window.innerWidth is accessed only in the browser otherwise it will throw an error on refresh\nonMounted(() => {\n  windowWidth.value = window.innerWidth;\n  window.addEventListener('resize', handleResize);\n});\n\nonBeforeUnmount(() => {\n  window.removeEventListener('resize', handleResize);\n});\n\nconst gridClass = computed(() => {\n  const cols = props.cols ?? config.default.cols;\n\n  if (windowWidth.value >= 1300) {\n    return [\"grid\", gridSizes.gridCols[cols]].join(' ');\n  } else if (windowWidth.value < 640) {\n    return [\"grid\", \"grid-cols-1\"].join(' ');\n  } else if (windowWidth.value > 640 && windowWidth.value < 980) {\n    return [\"grid\", \"grid-cols-2\"].join(' ');\n  } else {\n    return [\"grid\", \"grid-cols-3\"].join(' ');\n  }\n});\n\nconst route = useRoute()\nconst { data: page } = await useAsyncData(`docs-${route.path}`, () => queryContent(route.path).findOne());\n\nconst cards = ref<any[]>([]); // Ref to store fetched card data\nconst tags = ref<string[]>([]); // Ref to store all tags\nconst selectedTags = ref<string[]>([]); // Ref to store selected tags\n\nconst getCards = async () => {\n  const result = await queryContent('news/articles')\n    .where({ cardID: { $in: props.cardID } })\n    .find();\n\n  return result;\n}\n\nconst tagStac = () => {\n  if (cards.value.length > 0) {\n    const uniqueTags = new Set<string>();\n    cards.value.forEach(el => {\n      el.tags?.forEach(tag => {\n        if (tag !== null && tag.length > 0) {\n          uniqueTags.add(tag)\n        }\n      });\n    })\n    tags.value = Array.from(uniqueTags)\n  } else {\n    tags.value = []\n  }\n}\n\nconst updateData = async () => {\n  cards.value = await getCards()\n  tagStac()\n}\n\nconst filteredCards = computed(() => {\n  if (selectedTags.value.length === 0) {\n    return cards.value;\n  }\n  return cards.value.filter(card => {\n    let belongs = false;\n    card.tags?.forEach(tag => {\n      if (tag !== null && tag.length > 0 && selectedTags.value.includes(tag)) {\n        belongs = true\n      }\n    });\n    return belongs;\n  });\n});\n\nconst toggleTag = (tag: string) => {\n  if (selectedTags.value.includes(tag)) {\n    selectedTags.value = selectedTags.value.filter(t => t !== tag);\n  } else {\n    selectedTags.value.push(tag);\n  }\n};\n\nconst clearTags = () => {\n  selectedTags.value = [];\n};\n\nupdateData()\n</script>\n"],"names":["_withAsyncContext"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAe,SAAA;AAAA,EACb,SAAS;AAAA,EACT,OAAO;AAAA,EACP,MAAM;AAAA,IACJ,OAAO;AAAA,IACP,OAAO;AAAA,IACP,MAAM;AAAA,EACR;AAAA,EACA,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,UAAU;AAAA,EACV,MAAM;AAAA,EACN,MAAM;AAAA,EACN,KAAK;AAAA;AAAA,EAEL,SAAS,CACT;AACF;;;;;;;;;;;;;;;;;ACmCA,UAAM,QAAQ;AAuBR,UAAA,EAAE,IAAI,MAAA,IAAU;AAAA,MACpB;AAAA,MACA,MAAM,OAAO,IAAI;AAAA,MACjB;AAAA,MACA,MAAM,OAAO,OAAO;AAAA,IAAA;AAGhB,UAAA,cAAc,IAAI,CAAC;AAgBnB,UAAA,YAAY,SAAS,MAAM;AAC/B,YAAM,OAAO,MAAM,QAAQ,OAAO,QAAQ;AAEtC,UAAA,YAAY,SAAS,MAAM;AACtB,eAAA,CAAC,QAAQ,UAAU,SAAS,IAAI,CAAC,EAAE,KAAK,GAAG;AAAA,MAAA,WACzC,YAAY,QAAQ,KAAK;AAClC,eAAO,CAAC,QAAQ,aAAa,EAAE,KAAK,GAAG;AAAA,MAAA,WAC9B,YAAY,QAAQ,OAAO,YAAY,QAAQ,KAAK;AAC7D,eAAO,CAAC,QAAQ,aAAa,EAAE,KAAK,GAAG;AAAA,MAAA,OAClC;AACL,eAAO,CAAC,QAAQ,aAAa,EAAE,KAAK,GAAG;AAAA,MACzC;AAAA,IAAA,CACD;AAED,UAAM,QAAQ;AACK,IAAI,CAAA,QAAA,SAAA,IAAAA,iBAAA,MAAM,aAAa,QAAQ,MAAM,IAAI,IAAI,MAAM,aAAa,MAAM,IAAI,EAAE,SAAS,CAAA;AAElG,UAAA,QAAQ,IAAW,CAAA,CAAE;AACrB,UAAA,OAAO,IAAc,CAAA,CAAE;AACvB,UAAA,eAAe,IAAc,CAAA,CAAE;AAErC,UAAM,WAAW,YAAY;AAC3B,YAAM,SAAS,MAAM,aAAa,eAAe,EAC9C,MAAM,EAAE,QAAQ,EAAE,KAAK,MAAM,OAAS,EAAA,CAAC,EACvC,KAAK;AAED,aAAA;AAAA,IAAA;AAGT,UAAM,UAAU,MAAM;AAChB,UAAA,MAAM,MAAM,SAAS,GAAG;AACpB,cAAA,iCAAiB;AACjB,cAAA,MAAM,QAAQ,CAAM,OAAA;;AACrB,mBAAA,SAAA,mBAAM,QAAQ,CAAO,QAAA;AACtB,gBAAI,QAAQ,QAAQ,IAAI,SAAS,GAAG;AAClC,yBAAW,IAAI,GAAG;AAAA,YACpB;AAAA,UAAA;AAAA,QACD,CACF;AACI,aAAA,QAAQ,MAAM,KAAK,UAAU;AAAA,MAAA,OAC7B;AACL,aAAK,QAAQ;MACf;AAAA,IAAA;AAGF,UAAM,aAAa,YAAY;AACvB,YAAA,QAAQ,MAAM;AACZ;IAAA;AAGJ,UAAA,gBAAgB,SAAS,MAAM;AAC/B,UAAA,aAAa,MAAM,WAAW,GAAG;AACnC,eAAO,MAAM;AAAA,MACf;AACO,aAAA,MAAM,MAAM,OAAO,CAAQ,SAAA;;AAChC,YAAI,UAAU;AACT,mBAAA,SAAA,mBAAM,QAAQ,CAAO,QAAA;AACpB,cAAA,QAAQ,QAAQ,IAAI,SAAS,KAAK,aAAa,MAAM,SAAS,GAAG,GAAG;AAC5D,sBAAA;AAAA,UACZ;AAAA,QAAA;AAEK,eAAA;AAAA,MAAA,CACR;AAAA,IAAA,CACF;AAcU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}