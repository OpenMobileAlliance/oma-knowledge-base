{"version":3,"file":"sh-faq-DgAqUcTG.js","sources":["../../../../ui.config/sh-faq.ts","../../../../components/content/sh-faq.vue"],"sourcesContent":["export default {\n  header: {\n    wrapper: \"mt-10\",\n    title: \"text-2xl font-bold\",\n  },\n  wrapper: \"border rounded-xl\",\n  inner: \"mx-3 cursor-pointer\",\n  question: \"grid grid-cols-2 flex-row font-bold\",\n  q: \"w-full hover:scale-105 duration-300 hover:text-primary dark:text-white mx-4\",\n  answer: \"ml-1\",\n  a: \"mx-6 dark:text-white font-light\",\n  divider: \"border-b\",\n  icon: \"place-self-end self-center text-2xl i-icons8-chevron-right-round\",\n  // Default Tailwind CSS values\n  default: {\n  }\n}\n","<template>\n  <p :class=\"ui.header.wrapper\">\n    <MDC v-if=\"title\" :class=\"ui.header.title\" :value=\"title\" />\n  </p>\n  <div :class=\"ui.wrapper\">\n    <div v-for=\"(faq, index) in faqs\" :key=\"index\" :class=\"ui.inner\">\n      <p :class=\"ui.question\" @click=\"toggleAnswer(index)\">\n        <MDC v-if=\"faq.q\" :class=\"['not-prose', ui.q]\" :value=\"'Q: ' + faq.q\" />\n        <span :class=\"[ui.icon, visibleAnswers[index] ? 'rotate-90' : 'rotate-0', 'transition-transform duration-300']\"></span>\n      </p>\n      <p :class=\"[ui.answer, 'transition-max-height duration-500 ease-in-out overflow-hidden']\" :style=\"{ maxHeight: visibleAnswers[index] ? answerHeights[index] : '0' }\" ref=\"answerRefs\">\n        <MDC v-if=\"faq.a\" :class=\"ui.a\" :value=\"faq.a\" />\n      </p>\n      <div v-if=\"index < faqs.length - 1\" :class=\"ui.divider\"></div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { defineProps, computed, ref, toRef, onMounted, nextTick } from 'vue';\nimport { faq as config } from '@/ui.config'; // Importing the config file\n\ninterface Faq {\n  q: string;\n  a: string;\n}\n\n// Define the props to accept a dynamic number of Q&A pairs\nconst props = withDefaults(\n  defineProps<{\n    description?: string;\n    qas: Faq[];\n    title?: string;\n    ui?: Partial<typeof config>;\n  }>(),\n  {\n    ui: () => ({}),\n    description: \"\",\n    title: \"FAQs\",\n  }\n);\n\nconst { ui } = useUI(\n  \"sh-faq\",\n  toRef(props, \"ui\"),\n  config\n);\n\n// Convert the incoming Q&A props to a structured format\nconst faqs = computed(() => {\n  return props.qas.map((item) => ({\n    q: item.q,\n    a: item.a,\n  }));\n});\n\nconst icon = computed(() => {\n  return config.icon;\n});\n\n// State to track which answers are visible\nconst visibleAnswers = ref<boolean[]>(faqs.value.map(() => false));\nconst answerHeights = ref<string[]>(faqs.value.map(() => '0'));\nconst answerRefs = ref<HTMLParagraphElement[]>([]);\n\n// Function to toggle visibility of answers\nconst toggleAnswer = (index: number) => {\n  visibleAnswers.value[index] = !visibleAnswers.value[index];\n  nextTick(() => {\n    const element = answerRefs.value[index];\n    answerHeights.value[index] = visibleAnswers.value[index] ? `${element.scrollHeight}px` : '0';\n  });\n};\n\nonMounted(() => {\n  faqs.value.forEach((_, index) => {\n    const element = answerRefs.value[index];\n    answerHeights.value[index] = `${element.scrollHeight}px`;\n  });\n});\n</script>\n\n<style>\n/* Transition for max-height */\n.transition-max-height {\n  transition: max-height 0.5s ease-in-out;\n}\n</style>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAe,SAAA;AAAA,EACb,QAAQ;AAAA,IACN,SAAS;AAAA,IACT,OAAO;AAAA,EACT;AAAA,EACA,SAAS;AAAA,EACT,OAAO;AAAA,EACP,UAAU;AAAA,EACV,GAAG;AAAA,EACH,QAAQ;AAAA,EACR,GAAG;AAAA,EACH,SAAS;AAAA,EACT,MAAM;AAAA;AAAA,EAEN,SAAS,CACT;AACF;;;;;;;;;;;ACYA,UAAM,QAAQ;AAcR,UAAA,EAAE,OAAO;AAAA,MACb;AAAA,MACA,MAAM,OAAO,IAAI;AAAA,MACjB;AAAA,IAAA;AAII,UAAA,OAAO,SAAS,MAAM;AAC1B,aAAO,MAAM,IAAI,IAAI,CAAC,UAAU;AAAA,QAC9B,GAAG,KAAK;AAAA,QACR,GAAG,KAAK;AAAA,MACR,EAAA;AAAA,IAAA,CACH;AAEY,aAAS,MAAM;AAC1B,aAAO,OAAO;AAAA,IAAA,CACf;AAGD,UAAM,iBAAiB,IAAe,KAAK,MAAM,IAAI,MAAM,KAAK,CAAC;AACjE,UAAM,gBAAgB,IAAc,KAAK,MAAM,IAAI,MAAM,GAAG,CAAC;AAC1C,QAA4B,CAAA,CAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}